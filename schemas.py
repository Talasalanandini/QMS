from pydantic import BaseModel, EmailStr
from typing import Optional, Literal

class EmployeeBase(BaseModel):
    full_name: str
    email: EmailStr
    phone: Optional[str] = None
    department_id: int
    role_id: int

class EmployeeCreate(EmployeeBase):
    pass  # Password will be autogenerated

class EmployeeResponse(EmployeeBase):
    id: int
    class Config:
        orm_mode = True

class EmployeeInDB(EmployeeBase):
    id: int
    password: str  # For internal use only
    class Config:
        orm_mode = True

class EmployeeListItem(BaseModel):
    id: int
    full_name: str
    email: EmailStr
    role: str
    department: str
    class Config:
        orm_mode = True

class LoginRequest(BaseModel):
    email: EmailStr
    password: str

class LoginResponse(BaseModel):
    message: str
    access_token: str
    expires_at: str

class TokenSchema(BaseModel):
    id: int
    user_id: int
    token: str
    expires_at: str
    created_at: str
    revoked: int
    class Config:
        orm_mode = True

class ProfileUpdateSchema(BaseModel):
    full_name: Optional[str]
    phone: Optional[str]
    status: Optional[str]

class PasswordChangeSchema(BaseModel):
    old_password: str
    new_password: str

class SignatureSchema(BaseModel):
    signature: str  # base64 string or file path

class FirstPasswordResetSchema(BaseModel):
    email: EmailStr
    old_password: str
    new_password: str

class AuditCreateSchema(BaseModel):
    title: str
    type: Literal['Internal', 'External', 'Compliance', 'Regulatory', 'Financial']
    status: str = 'Scheduled'
    scheduled_date: str | None = None
    lead_auditor_id: int | None = None
    scope: str | None = None

class AuditEditSchema(BaseModel):
    title: Optional[str] = None
    type: Optional[Literal['Internal', 'External', 'Compliance', 'Regulatory', 'Financial']] = None
    status: Optional[str] = None
    scheduled_date: Optional[str] = None
    lead_auditor_id: Optional[int] = None
    scope: Optional[str] = None

class FeedbackCreateSchema(BaseModel):
    audit_id: int
    feedback: str
